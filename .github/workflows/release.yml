name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

env:
  NODE_VERSION: '18'
  GO_VERSION: '1.24'

jobs:
  build-backend:
    name: Build Backend Binaries
    strategy:
      matrix:
        include:
          # macOS builds (Intel & Apple Silicon)
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
            runner: macos-13  # Intel-based macOS
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
            runner: macos-latest  # Apple Silicon macOS
          # Linux build
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
            runner: ubuntu-latest
          # Windows build
          - goos: windows
            goarch: amd64
            suffix: windows-amd64
            ext: .exe
            runner: windows-latest
    
    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-${{ matrix.goarch }}-go-${{ hashFiles('backend/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.goarch }}-go-
            ${{ runner.os }}-go-

      - name: Build backend binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
        run: |
          cd backend
          go mod tidy
          go build -ldflags="-s -w" -o ../claudeee-server-${{ matrix.suffix }}${{ matrix.ext }} cmd/server/main.go

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary-${{ matrix.suffix }}
          path: claudeee-server-${{ matrix.suffix }}${{ matrix.ext }}

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci --legacy-peer-deps

      - name: Build frontend with production settings
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080
          NODE_ENV: production
        run: |
          cd frontend
          # Build with Next.js standalone output for self-contained deployment
          npm run build
          
          # Verify build was successful
          if [ ! -d ".next" ]; then
            echo "ERROR: .next directory not found after build"
            exit 1
          fi
          
          echo "Build successful, .next directory created"
          ls -la .next/

      - name: Create minimal runtime environment for frontend
        run: |
          cd frontend
          
          # Create minimal package.json for runtime
          cat > package-runtime.json << 'EOF'
          {
            "name": "claudeee-frontend",
            "version": "1.0.0",
            "private": true,
            "scripts": {
              "start": "next start"
            },
            "dependencies": {
              "next": "15.2.4",
              "react": "^19",
              "react-dom": "^19"
            }
          }
          EOF
          
          # Install only runtime dependencies (production only)
          npm ci --omit=dev --legacy-peer-deps
          
          # Create a minimal node_modules for runtime
          mkdir -p runtime-deps
          
          # Copy essential runtime dependencies
          for pkg in next react react-dom; do
            if [ -d "node_modules/$pkg" ]; then
              echo "Copying $pkg..."
              cp -r "node_modules/$pkg" runtime-deps/
            fi
          done
          
          # Copy any other critical dependencies that Next.js needs at runtime
          for pkg in styled-jsx scheduler; do
            if [ -d "node_modules/$pkg" ]; then
              echo "Copying runtime dependency $pkg..."
              cp -r "node_modules/$pkg" runtime-deps/
            fi
          done
          
          echo "Runtime dependencies prepared:"
          ls -la runtime-deps/

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            frontend/.next/
            frontend/public/
            frontend/package-runtime.json
            frontend/next.config.js
            frontend/runtime-deps/
          include-hidden-files: true

  create-release:
    name: Create Release Package
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Download backend binaries
        uses: actions/download-artifact@v4
        with:
          pattern: backend-binary-*
          path: binaries/
          merge-multiple: true

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-artifacts/

      - name: Debug frontend artifacts
        run: |
          echo "=== Downloaded frontend artifacts ==="
          find frontend-artifacts -type f | head -20
          echo ""
          echo "=== Checking for .next directory ==="
          find frontend-artifacts -name ".next" -type d
          echo ""
          echo "=== .next directory contents (if exists) ==="
          ls -la frontend-artifacts/.next/ 2>/dev/null || echo "No .next directory found"
          echo ""
          echo "=== .next/static directory contents ==="
          ls -la frontend-artifacts/.next/static/ 2>/dev/null || echo "No .next/static directory found"
          echo ""
          echo "=== Public directory contents ==="
          ls -la frontend-artifacts/public/ 2>/dev/null || echo "No public directory found"
          echo ""
          echo "=== Standalone directory contents ==="
          ls -la frontend-artifacts/.next/standalone/ 2>/dev/null || echo "No standalone directory found"
          echo ""
          echo "=== Standalone .next contents ==="
          ls -la frontend-artifacts/.next/standalone/.next/ 2>/dev/null || echo "No .next in standalone"

      - name: Get version from tag or input
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Create npm package structure
        run: |
          echo "Creating package structure for version ${{ steps.version.outputs.version }}"
          
          # Create the ideal npm package structure
          mkdir -p dist/bin/frontend-dist
          mkdir -p dist/scripts
          
          # Copy backend binaries to bin/
          cp binaries/* dist/bin/ || echo "No backend binaries found"
          
          # Set executable permissions
          chmod +x dist/bin/claudeee-server-* || echo "No backend binaries to set permissions"
          
          # Copy main CLI script
          cp bin/claudeee.js dist/bin/
          
          # Setup frontend distribution in bin/frontend-dist/
          if [ -d "frontend-artifacts" ]; then
            echo "Setting up frontend distribution..."
            
            # Ensure frontend-dist directory exists
            mkdir -p dist/bin/frontend-dist
            
            # For standalone builds, copy the standalone directory contents
            if [ -d "frontend-artifacts/.next/standalone" ]; then
              echo "Using standalone build structure"
              
              # Copy all files from standalone directory including hidden files
              cd frontend-artifacts/.next/standalone
              cp -r * ../../../dist/bin/frontend-dist/ 2>/dev/null || true
              cp -r .* ../../../dist/bin/frontend-dist/ 2>/dev/null || true
              cd - >/dev/null
              
              echo "Copied standalone build contents including hidden files"
              
              # Copy static files from main .next directory
              if [ -d "frontend-artifacts/.next/static" ]; then
                mkdir -p dist/bin/frontend-dist/.next/static
                cp -r frontend-artifacts/.next/static/* dist/bin/frontend-dist/.next/static/
                echo "Copied static files from main .next directory"
              else
                echo "WARNING: No static files found in main .next directory"
              fi
              
              # Verify the build structure
              echo "Verifying standalone build structure:"
              ls -la dist/bin/frontend-dist/
              echo ""
              echo "Checking for .next directory:"
              ls -la dist/bin/frontend-dist/.next/ 2>/dev/null || echo "No .next in standalone"
              echo ""
              echo "Checking for static files:"
              ls -la dist/bin/frontend-dist/.next/static/ 2>/dev/null || echo "No static files"
              
              # Copy public files if they exist
              if [ -d "frontend-artifacts/public" ]; then
                cp -r frontend-artifacts/public dist/bin/frontend-dist/
                echo "Copied public directory"
              fi
            else
              echo "ERROR: No standalone build found"
              find frontend-artifacts -name "standalone" -type d
              exit 1
            fi
            
            # Copy runtime package.json
            if [ -f "frontend-artifacts/package-runtime.json" ]; then
              cp frontend-artifacts/package-runtime.json dist/bin/frontend-dist/package.json
            else
              echo "ERROR: No package-runtime.json found"
              exit 1
            fi
            
            # Copy next.config.js if it exists
            if [ -f "frontend-artifacts/next.config.js" ]; then
              cp frontend-artifacts/next.config.js dist/bin/frontend-dist/
            fi
            
            # Setup minimal node_modules for runtime
            if [ -d "frontend-artifacts/runtime-deps" ]; then
              mkdir -p dist/bin/frontend-dist/node_modules
              cp -r frontend-artifacts/runtime-deps/* dist/bin/frontend-dist/node_modules/
              echo "Runtime dependencies copied to frontend-dist/node_modules"
              ls -la dist/bin/frontend-dist/node_modules/
            else
              echo "WARNING: No runtime-deps found, frontend may not work"
            fi
            
            echo "Frontend distribution created:"
            find dist/bin/frontend-dist -maxdepth 2 -type f | head -10
          else
            echo "ERROR: No frontend-artifacts directory found"
            exit 1
          fi
          
          # Copy utility scripts
          cp scripts/platform-detector.js dist/scripts/ 2>/dev/null || echo "No platform-detector.js to copy"
          cp scripts/postinstall.js dist/scripts/ 2>/dev/null || echo "No postinstall.js to copy"

      - name: Update package.json for distribution
        run: |
          NEW_VERSION=${{ steps.version.outputs.version }}
          
          # Create distribution package.json
          cat > dist/package.json << EOF
          {
            "name": "claudeee",
            "version": "$NEW_VERSION",
            "description": "Claude Code Monitoring - A comprehensive monitoring for Claude Code",
            "main": "bin/claudeee.js",
            "bin": {
              "claudeee": "./bin/claudeee.js"
            },
            "scripts": {
              "postinstall": "node scripts/postinstall.js",
              "preuninstall": "node scripts/postinstall.js cleanup"
            },
            "keywords": [
              "claude",
              "claude-code",
              "monitoring",
              "task-scheduler",
              "ai",
              "development-tools",
              "cli"
            ],
            "author": "Claude Code Team",
            "license": "MIT",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/satoshi03/claudeee.git"
            },
            "bugs": {
              "url": "https://github.com/satoshi03/claudeee/issues"
            },
            "homepage": "https://github.com/satoshi03/claudeee#readme",
            "engines": {
              "node": ">=18.0.0",
              "npm": ">=8.0.0"
            },
            "os": [
              "darwin",
              "linux",
              "win32"
            ],
            "preferGlobal": true,
            "files": [
              "bin/",
              "scripts/",
              "README.md"
            ],
            "cpu": [
              "x64",
              "arm64"
            ],
            "publishConfig": {
              "access": "public"
            }
          }
          EOF

      - name: Update claudeee.js for frontend-dist structure
        run: |
          # Update the claudeee.js script to use the new frontend-dist structure
          sed -i 's|path.join(packageRoot, '\''frontend'\'')|path.join(packageRoot, '\''bin'\'', '\''frontend-dist'\'')|g' dist/bin/claudeee.js
          
          echo "Updated claudeee.js to use bin/frontend-dist structure"

      - name: Create README for npm package
        run: |
          cat > dist/README.md << 'EOF'
          # Claudeee - Claude Code Monitor & Task Scheduler

          A comprehensive monitoring and task scheduling tool for Claude Code.

          ## Installation

          ```bash
          npm install -g claudeee
          ```

          ## Usage

          ```bash
          # Start with default ports
          claudeee

          # Start with custom ports
          claudeee --backend-port 8081 --frontend-port 3001

          # Show help
          claudeee help
          ```

          ## Features

          - Monitor Claude Code usage and token consumption
          - Track sessions and activities with 5-hour time windows
          - Web-based dashboard for visualization
          - Cross-platform support (macOS, Linux, Windows)
          - Command-line management tools

          ## Requirements

          - Node.js 18+
          - Modern web browser

          ## What's Included

          This package includes:
          - Pre-built backend binaries for all supported platforms
          - Pre-built frontend assets (No additional build step required)
          - Self-contained runtime with minimal dependencies

          ## API Access

          When running, Claudeee provides:
          - Backend API: `http://localhost:8080`
          - Frontend UI: `http://localhost:3000` (when available)

          ## Support

          For issues and feature requests, visit: https://github.com/satoshi03/claudeee
          EOF

      - name: Debug package structure
        run: |
          echo "=== Final package structure ==="
          find dist -type f | head -30
          echo ""
          echo "=== Package size breakdown ==="
          du -sh dist/*
          echo ""
          echo "=== Frontend-dist contents ==="
          ls -la dist/bin/frontend-dist/ 2>/dev/null || echo "No frontend-dist directory"
          echo ""
          echo "=== Binaries ==="
          ls -la dist/bin/claudeee-server-* 2>/dev/null || echo "No backend binaries"

      - name: Test package
        run: |
          cd dist
          npm pack --dry-run

      - name: Publish to npm
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          cd dist
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in ${{ steps.version.outputs.version }}
            
            ### 🚀 Features
            - Self-contained npm package with pre-built binaries
            - No additional build steps required after installation
            - Improved frontend distribution with minimal dependencies
            - Enhanced CLI with port configuration
            
            ### 📦 Installation
            ```bash
            npm install -g claudeee@${{ steps.version.outputs.version }}
            ```
            
            ### 🔧 Usage
            ```bash
            claudeee --backend-port 8081 --frontend-port 3001
            ```
            
            ### 📋 Supported Platforms
            - macOS (Intel & Apple Silicon)
            - Linux (x64)
            - Windows (x64)
          draft: false
          prerelease: false
          files: |
            claudeee-server-*

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: npm-package
          path: dist/

  test-package:
    name: Test Package Installation
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18, 20]
    
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: npm-package
          path: test-package/

      - name: Debug package structure
        run: |
          cd test-package
          echo "=== Package structure ==="
          find . -maxdepth 3 -type f | head -20
          echo "=== Frontend-dist contents ==="
          ls -la bin/frontend-dist/ 2>/dev/null || echo "No frontend-dist directory"
          echo "=== Frontend-dist .next contents ==="
          ls -la bin/frontend-dist/.next/ 2>/dev/null || echo "No .next directory in frontend-dist"
          echo "=== Package.json bin section ==="
          node -e "console.log(JSON.stringify(require('./package.json').bin, null, 2))"
        shell: bash

      - name: Test package installation
        run: |
          cd test-package
          npm pack
          TARBALL=$(node -e "console.log(require('./package.json').name + '-' + require('./package.json').version + '.tgz')")
          echo "Installing tarball: $TARBALL"
          npm install -g "$TARBALL"
        shell: bash

      - name: Test CLI functionality
        run: |
          if command -v claudeee >/dev/null 2>&1; then
            echo "=== Testing claudeee help ==="
            claudeee help
          else
            echo "=== Testing npx claudeee help ==="
            npx claudeee help
          fi
        shell: bash